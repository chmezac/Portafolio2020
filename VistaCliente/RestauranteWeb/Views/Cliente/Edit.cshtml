@model RestauranteDatos.CLIENTE

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Editar cliente</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal"; width: 70rem">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <label class="control-label col-md-2">Rut Cliente</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.RUT_CLIENTE, new
           {
               htmlAttributes = new
               {
                   @class = "form-control",
                   @id = "rut",
                   @name = "rut",
                   @oninput = "checkRut(this)"
               }
           })
                @Html.ValidationMessageFor(model => model.RUT_CLIENTE, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Nombre</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.NOMBRE_CLIENTE, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NOMBRE_CLIENTE, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Apellido</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.APELLIDO_CLIENTE, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.APELLIDO_CLIENTE, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Correo</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.CORREO_CLIENTE, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CORREO_CLIENTE, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Teléfono</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.TELEFONO_CLIENTE, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TELEFONO_CLIENTE, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar cambios" class="btn btn-success" />
                @Html.ActionLink("Volver", "Index", null, new { @class = "btn btn-info" })
            </div>
        </div>
        <br />
    </div>
}
<script>function checkRut(rut) {
        // Despejar Puntos
        var valor = rut.value.replace('.', '');
        // Despejar Guión
        valor = valor.replace('-', '');

        // Aislar Cuerpo y Dígito Verificador
        cuerpo = valor.slice(0, -1);
        dv = valor.slice(-1).toUpperCase();

        // Formatear RUN
        rut.value = cuerpo + '-' + dv

        // Si no cumple con el mínimo ej. (n.nnn.nnn)
        if (cuerpo.length < 7) { rut.setCustomValidity("RUT Incompleto"); return false; }

        // Calcular Dígito Verificador
        suma = 0;
        multiplo = 2;

        // Para cada dígito del Cuerpo
        for (i = 1; i <= cuerpo.length; i++) {

            // Obtener su Producto con el Múltiplo Correspondiente
            index = multiplo * valor.charAt(cuerpo.length - i);

            // Sumar al Contador General
            suma = suma + index;

            // Consolidar Múltiplo dentro del rango [2,7]
            if (multiplo < 7) { multiplo = multiplo + 1; } else { multiplo = 2; }

        }

        // Calcular Dígito Verificador en base al Módulo 11
        dvEsperado = 11 - (suma % 11);

        // Casos Especiales (0 y K)
        dv = (dv == 'K') ? 10 : dv;
        dv = (dv == 0) ? 11 : dv;

        // Validar que el Cuerpo coincide con su Dígito Verificador
        if (dvEsperado != dv) { rut.setCustomValidity("RUT Inválido"); return false; }

        // Si todo sale bien, eliminar errores (decretar que es válido)
        rut.setCustomValidity('');
    }</script>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
